// writeToSheet.js  ‚Äì ‰øÆÊ≠£ÔºöÁ≠âÁ¥öÂà§Êñ∑ / ÈõªË©±ÂâçÂ∞é 0 / Ë®ÇË≥ºÊó•Ê†ºÂºè (M/D)
import fetch from 'node-fetch';

const SHEET_CSV_URL   = process.env.SHEET_API_URL_CSV;   // ËÆÄ CSV
const SHEET_WRITE_URL = process.env.SHEET_API_URL;       // GAS WebApp
const PRODUCT_NAME    = 'ÈõôËóªüåø';
const CHANNEL         = 'IG';
const MAX_GROUPS      = 6;

/* Â∑•ÂÖ∑ ---------------------------------------------------------------- */
const cleanAll = (s = '') =>
  String(s)
    .replace(/[\s\u3000]/g, '')
    .replace(/[\u200B-\u200D\uFEFF]/g, '')
    .normalize('NFKC');

const normPhone = (s = '') => {
  const digits = String(s).replace(/\D/g, '');
  let p = digits.startsWith('886') ? digits.slice(3) : digits;
  return p.length === 9 ? '0' + p : p;      // 918‚Ä¶ ‚Üí 0918‚Ä¶
};

/* ‰∏ªÂáΩÂºè -------------------------------------------------------------- */
async function verifyCustomer(order) {
  /* 1. ÊäìÊúÄÊñ∞ CSVÔºàÁ†¥Âø´ÂèñÔºâ */
  const res = await fetch(`${SHEET_CSV_URL}&_=${Date.now()}`);
  if (!res.ok) throw new Error('‚ùå ÁÑ°Ê≥ïËÆÄÂèñ Google Sheet');
  const rows = (await res.text()).trim().split('\n').map(r => r.split(','));

  /* 2. Âèñ‰∏âÁ¢º */
  const ig    = cleanAll(order.ig);
  const name  = cleanAll(order.name);
  const phone = normPhone(order.phone);

  /* 3. Âö¥Ê†ºÊØîÂ∞çÊâæ idx */
  const idx = rows.findIndex(r =>
    cleanAll(r[3]) === ig &&
    cleanAll(r[4]) === name &&
    normPhone(r[5]) === phone
  );

  /* 4. Êâæ‰∏çÂà∞ ‚Üí Êñ∞ÂÆ¢ / ËøΩËπ§ */
  if (idx === -1) {
    console.log('üÜï Êñ∞ÂÆ¢ / ËøΩËπ§Ôºö‰∏âÁ¢ºÂ∞ç‰∏çÂà∞', { ig, name, phone });
    return { type: 'new', rowIndex: null };
  }

  /* 5. Ë®àÁÆóÊúâÊïàË°åËôüÔºàÊéíÁ©∫ÁôΩÂàóÔºâ */
  const realRow = rows.slice(0, idx + 1)
    .filter(r => cleanAll(r[3]) || cleanAll(r[4]) || normPhone(r[5]))
    .length;                                // 1-based

  /* 6. ÊâæÂè≥ÂÅ¥Á©∫Ê¨Ñ (K~M, N~P‚Ä¶) */
  const row = rows[idx];
  for (let g = 0; g < MAX_GROUPS; g++) {
    const base = 10 + g * 3;
    if (!row[base] && !row[base + 1] && !row[base + 2]) {
      return { type: 'repurchase', rowIndex: realRow };
    }
  }

  throw new Error('‚ùå ÂõûË≥ºÊ¨Ñ‰ΩçÂ∑≤ÊªøÔºåÁÑ°Ê≥ïÂÜçÂØ´ÂÖ•');
}

/* ÈõôÂåØÂá∫Ôºödefault + ÂÖ∑Âêç --------------------------------------------- */
export { verifyCustomer as default, verifyCustomer };
